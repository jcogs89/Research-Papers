
brokencode.c:418:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
brokencode.c:437:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
brokencode.c:440:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
brokencode.c:442:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.


brokencode.c:588:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move things
  around to create a race condition, control its ancestors, or change its
  contents? (CWE-362).


brokencode.c:619:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.

  
brokencode.c:185:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
brokencode.c:210:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).

ANALYSIS SUMMARY:

Hits = 35
Lines analyzed = 625 in approximately 0.06 seconds (10418 lines/second)
Physical Source Lines of Code (SLOC) = 471
Hits@level = [0]   9 [1]   2 [2]  25 [3]   0 [4]   7 [5]   1
Hits@level+ = [0+]  44 [1+]  35 [2+]  33 [3+]   8 [4+]   8 [5+]   1
Hits/KSLOC@level+ = [0+] 93.4183 [1+] 74.31 [2+] 70.0637 [3+] 16.9851 [4+] 16.9851 [5+] 2.12314
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming HOWTO'
(https://dwheeler.com/secure-programs) for more information.
